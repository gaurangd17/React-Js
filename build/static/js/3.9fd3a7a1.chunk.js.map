{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.9fd3a7a1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.css'\r\n\r\nconst checkoutSummary = (props) => {\r\n    return(\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!!!</h1>\r\n            <div style={{width: '100%', margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/> \r\n            </div>\r\n            <Button \r\n                btnType='Danger'\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType='Success'\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport {updateObject, checkValidity} from '../../../shared/utitlity'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm : {\r\n            name : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Your Name'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Street'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Zip Code'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 5,\r\n                    maxLength : 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Country'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Your E-mail'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod : {\r\n                elementType : 'select',\r\n                elementConfig : {\r\n                    options : [\r\n                        {value : 'fastest', displayValue: 'Fastest'},\r\n                        {value : 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value : 'fastest',\r\n                validation : {\r\n                    required : false\r\n                },\r\n                valid : true\r\n            }           \r\n        },\r\n        formIsValid: false        \r\n        // loading: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //  this.setState({\r\n        //     loading:true\r\n        // })\r\n\r\n        const formData = {}\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        //alert('You Continue!!!')\r\n        const order = {\r\n            ingredients : this.props.ingredients,\r\n            price : this.props.totalPrice,\r\n            orderData : formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token)\r\n\r\n        // axios.post('/orders.json',order)\r\n        //     .then(response => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //         console.log(response);\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //     });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        }) \r\n        // {\r\n        //     ...updatedOrderForm[inputIdentifier]\r\n        // }\r\n\r\n        // updatedFormElement.value = event.target.value;\r\n        // updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        // updatedFormElement.touched = true;\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]: updatedFormElement\r\n        })\r\n        // {...this.state.orderForm}\r\n        // updatedOrderForm[inputIdentifier] = updatedFormElement\r\n\r\n        let formIsValid = true\r\n\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        // console.log(formIsValid)\r\n\r\n        this.setState({\r\n            orderForm : updatedOrderForm,\r\n            formIsValid : formIsValid\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id} \r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        price={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)}\r\n                    />\r\n                ))}\r\n                <Button btnType='Success' clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button> \r\n            </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onOrderBurger : (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)) \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (withErrorHandler(ContactData,axios))","import React, {Component} from 'react'\r\nimport {Route,Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nimport CheckoutSUmmary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from './ContactData/ContactData'\r\n\r\nclass Checkout extends Component {\r\n\r\n    // state = {\r\n    //     ingredients : null,\r\n    //     totalPrice : 0\r\n    // }\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data')\r\n    }\r\n    \r\n    // componentWillMount(){\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients = {};\r\n    //     let price = 0;\r\n\r\n    //     for(let param of query.entries()){\r\n    //         // ['salad', '1']\r\n    //         if(param[0]==='price'){\r\n    //             price = param[1]\r\n    //         } else {\r\n    //             ingredients[param[0]] = +param[1];\r\n    //         }               \r\n    //     }\r\n    //     this.setState({\r\n    //         ingredients : ingredients,\r\n    //         totalPrice : price\r\n    //     })\r\n    // }\r\n\r\n    render(){\r\n        let summary = <Redirect to='/'></Redirect>\r\n        if(this.props.ingredients){\r\n            const purchasedRedirect= this.props.purchased ? <Redirect to='/'/> : null\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSUmmary \r\n                        ingredients={this.props.ingredients}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler}></CheckoutSUmmary>\r\n                    <Route path={this.props.match.path + '/contact-data'} \r\n                        // render={(props) => (<ContactData \r\n                        //                     ingredients={this.props.ingredients}\r\n                        //                     price={this.state.totalPrice}\r\n                        //                     {...props}></ContactData>)}\r\n                        component={ContactData}/>\r\n                </div>\r\n            )\r\n        }\r\n        return summary\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react'\r\nimport classes from './Input.css'\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input') :\r\n            inputElement = <input \r\n                                className={inputClasses.join(' ')} \r\n                                {...props.elementConfig}\r\n                                onChange={props.changed}\r\n                                price={props.value}/>;\r\n            break;\r\n        case ('textarea') :\r\n            inputElement = <textarea \r\n                                className={inputClasses.join(' ')} \r\n                                {...props.elementConfig}\r\n                                onChange={props.changed}\r\n                                price={props.value}/>\r\n            break;\r\n        case ('select') :\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')}\r\n                    onChange={props.changed}\r\n                    price={props.value}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} \r\n                                value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            )\r\n            break;\r\n        default : \r\n            inputElement = <input \r\n                                className={inputClasses.join(' ')} \r\n                                {...props.elementConfig}\r\n                                onChange={props.changed}\r\n                                price={props.value}/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_1xBm4j5hECL-q6sCIhiBB4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"_1J81rlRO5zxuF98VMkEamZ\",\"Input\":\"_19h-AvGFVkYzvSaPjqmQAQ\"};"],"sourceRoot":""}
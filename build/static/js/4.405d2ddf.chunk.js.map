{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControlForm","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","console","log","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","price","invalid","shouldValidate","changed","loading","errorMessage","error","message","redirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.405d2ddf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2YUr1vYMbwujw6K1HuakLc\",\"Input\":\"MXqRP7mComGR53xXc_Nwa\"};","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport {updateObject, checkValidity} from '../../shared/utitlity'\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Mail address'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'password',\r\n                    placeholder : 'Password'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup:  true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath){\r\n            this.props.onSetAuthRedirectPath()\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControlForm = updateObject(this.state.controls, {\r\n                [controlName]: updateObject(this.state.controls[controlName], {\r\n                    value: event.target.value,\r\n                    valid: checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                    touched: true\r\n                })   \r\n            })\r\n            // ...this.state.controls,\r\n            // [controlName]: {\r\n            //     ...this.state.controls[controlName],\r\n            //     value: event.target.value,\r\n            //     valid: this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n            //     touched: true\r\n            // }}\r\n        this.setState({controls: updatedControlForm})\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup}\r\n        })\r\n        console.log('isSignup switch', this.state.isSignup)\r\n    }\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id} \r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                price={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\r\n        ))\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner></Spinner>\r\n        }\r\n\r\n        let errorMessage = null\r\n\r\n        if(this.props.error){\r\n            errorMessage = <p>{this.props.error.message}</p>\r\n        }\r\n\r\n        let redirect = null\r\n        if(this.props.isAuthenticated){\r\n            redirect = <Redirect to={this.props.authRedirectPath}></Redirect>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {redirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                     {form}\r\n                     <Button btnType='Success'>SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler} \r\n                    btnType='Danger'>\r\n                        SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapPropsToState = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token!==null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState, mapDispatchToProps)(Auth)","import React from 'react'\r\nimport classes from './Input.css'\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input') :\r\n            inputElement = <input \r\n                                className={inputClasses.join(' ')} \r\n                                {...props.elementConfig}\r\n                                onChange={props.changed}\r\n                                price={props.value}/>;\r\n            break;\r\n        case ('textarea') :\r\n            inputElement = <textarea \r\n                                className={inputClasses.join(' ')} \r\n                                {...props.elementConfig}\r\n                                onChange={props.changed}\r\n                                price={props.value}/>\r\n            break;\r\n        case ('select') :\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')}\r\n                    onChange={props.changed}\r\n                    price={props.value}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} \r\n                                value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            )\r\n            break;\r\n        default : \r\n            inputElement = <input \r\n                                className={inputClasses.join(' ')} \r\n                                {...props.elementConfig}\r\n                                onChange={props.changed}\r\n                                price={props.value}/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};"],"sourceRoot":""}
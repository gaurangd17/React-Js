{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject } from '../../../shared/utitlity';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {\n            required: false\n          },\n          valid: true\n        }\n      },\n      formIsValid: false // loading: false\n\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); //  this.setState({\n      //     loading:true\n      // })\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      } //alert('You Continue!!!')\n\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.totalPrice,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token); // axios.post('/orders.json',order)\n      //     .then(response => {\n      //         this.setState({\n      //             loading : false\n      //         })\n      //         console.log(response);\n      //         this.props.history.push('/');\n      //     })\n      //     .catch(error => {\n      //         this.setState({\n      //             loading : false\n      //         })\n      //     });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n        value: event.target.value,\n        valid: this.checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n        touched: true\n      }); // {\n      //     ...updatedOrderForm[inputIdentifier]\n      // }\n      // updatedFormElement.value = event.target.value;\n      // updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\n      // updatedFormElement.touched = true;\n\n      const updatedOrderForm = updateObject(this.state.orderForm, {\n        [inputIdentifier]: updatedFormElement\n      }); // {...this.state.orderForm}\n      // updatedOrderForm[inputIdentifier] = updatedFormElement\n\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      console.log(formIsValid);\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    } // console.log('isValid : ', isValid)\n\n\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, formElementArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      price: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.orderHandler,\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, \"ORDER\"));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    totalPrice: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","withErrorHandler","actions","updateObject","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","checkValidity","updatedOrderForm","console","log","setState","rules","isValid","trim","length","pattern","test","render","formElementArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport {updateObject} from '../../../shared/utitlity'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm : {\r\n            name : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Your Name'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Street'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Zip Code'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 5,\r\n                    maxLength : 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Country'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Your E-mail'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod : {\r\n                elementType : 'select',\r\n                elementConfig : {\r\n                    options : [\r\n                        {value : 'fastest', displayValue: 'Fastest'},\r\n                        {value : 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value : 'fastest',\r\n                validation : {\r\n                    required : false\r\n                },\r\n                valid : true\r\n            }           \r\n        },\r\n        formIsValid: false        \r\n        // loading: false\r\n    }\r\n\r\n    checkValidity(value, rules){\r\n        let isValid = true\r\n\r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        // console.log('isValid : ', isValid)\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //  this.setState({\r\n        //     loading:true\r\n        // })\r\n\r\n        const formData = {}\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        //alert('You Continue!!!')\r\n        const order = {\r\n            ingredients : this.props.ingredients,\r\n            price : this.props.totalPrice,\r\n            orderData : formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token)\r\n\r\n        // axios.post('/orders.json',order)\r\n        //     .then(response => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //         console.log(response);\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //     });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: this.checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        }) \r\n        // {\r\n        //     ...updatedOrderForm[inputIdentifier]\r\n        // }\r\n\r\n        // updatedFormElement.value = event.target.value;\r\n        // updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        // updatedFormElement.touched = true;\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]: updatedFormElement\r\n        })\r\n        // {...this.state.orderForm}\r\n    // updatedOrderForm[inputIdentifier] = updatedFormElement\r\n\r\n        let formIsValid = true\r\n\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        console.log(formIsValid)\r\n\r\n        this.setState({\r\n            orderForm : updatedOrderForm,\r\n            formIsValid : formIsValid\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id} \r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        price={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)}\r\n                    />\r\n                ))}\r\n                <Button btnType='Success' clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button> \r\n            </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onOrderBurger : (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)) \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (withErrorHandler(ContactData,axios))"]},"metadata":{},"sourceType":"module"}
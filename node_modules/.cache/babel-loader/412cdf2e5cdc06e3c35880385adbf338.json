{"ast":null,"code":"import { put, delay } from 'redux-saga/effects'; // import { delay } from 'redux-saga'\n\nimport * as actions from '../actions/index';\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userId');\n  yield put(actions.logoutSucceed());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: emailId,\n      password: pass,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n}","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/sagas/auth.js"],"names":["put","delay","actions","logoutSaga","action","localStorage","removeItem","logoutSucceed","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","dispatch","authStart","authData","email","emailId","password","pass","returnSecureToken","url","isSignup","axios","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","checkAuthTimeout","catch","err","authFail","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B,C,CACA;;AAEA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAChC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AACA,QAAMN,GAAG,CAACE,OAAO,CAACK,aAAR,EAAD,CAAT;AACH;AAED,OAAO,UAAUC,oBAAV,CAA+BJ,MAA/B,EAAuC;AAC1C,QAAMH,KAAK,CAACG,MAAM,CAACK,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMT,GAAG,CAACE,OAAO,CAACQ,MAAR,EAAD,CAAT;AACH;AAED,OAAO,UAAUC,YAAV,CAAuBP,MAAvB,EAA+B;AAElC,SAAOQ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,SAAS,EAAV,CAAR;AAEA,UAAMC,QAAQ,GAAG;AACbC,MAAAA,KAAK,EAAEC,OADM;AAEbC,MAAAA,QAAQ,EAAEC,IAFG;AAGbC,MAAAA,iBAAiB,EAAE;AAHN,KAAjB;AAMA,QAAIC,GAAG,GAAG,uGAAV;;AAEA,QAAG,CAACC,QAAJ,EAAa;AACTD,MAAAA,GAAG,GAAC,mHAAJ;AACH;;AAEDE,IAAAA,KAAK,CAACC,IAAN,CAAWH,GAAX,EAAgBN,QAAhB,EACKU,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,YAAMG,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBL,QAAQ,CAACM,IAAT,CAAcC,SAAd,GAA0B,IAA1D,CAAvB;AACA3B,MAAAA,YAAY,CAAC4B,OAAb,CAAqB,OAArB,EAA8BR,QAAQ,CAACM,IAAT,CAAcG,OAA5C;AACA7B,MAAAA,YAAY,CAAC4B,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACAvB,MAAAA,YAAY,CAAC4B,OAAb,CAAqB,QAArB,EAA+BR,QAAQ,CAACM,IAAT,CAAcI,OAA7C;AACAvB,MAAAA,QAAQ,CAACwB,WAAW,CAACX,QAAQ,CAACM,IAAT,CAAcG,OAAf,EAAwBT,QAAQ,CAACM,IAAT,CAAcI,OAAtC,CAAZ,CAAR;AACAvB,MAAAA,QAAQ,CAACyB,gBAAgB,CAACZ,QAAQ,CAACM,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACH,KATL,EAUKM,KAVL,CAUWC,GAAG,IAAI;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACA3B,MAAAA,QAAQ,CAAC4B,QAAQ,CAACD,GAAG,CAACd,QAAJ,CAAaM,IAAb,CAAkBU,KAAnB,CAAT,CAAR;AACH,KAbL;AAcH,GA7BD;AA8BH","sourcesContent":["import { put, delay } from 'redux-saga/effects'\r\n// import { delay } from 'redux-saga'\r\n\r\nimport * as actions from '../actions/index'\r\n\r\nexport function* logoutSaga(action) {\r\n    yield localStorage.removeItem('token')\r\n    yield localStorage.removeItem('expirationDate')\r\n    yield localStorage.removeItem('userId')\r\n    yield put(actions.logoutSucceed())\r\n}\r\n\r\nexport function* checkAuthTimeoutSaga(action) {\r\n    yield delay(action.expirationTime * 1000)\r\n    yield put(actions.logout())\r\n}\r\n\r\nexport function* authUserSaga(action) {\r\n    \r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        \r\n        const authData = {\r\n            email: emailId,\r\n            password: pass,\r\n            returnSecureToken: true\r\n        }; \r\n\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n\r\n        if(!isSignup){\r\n            url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n        }\r\n\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                console.log(response)\r\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n                localStorage.setItem('token', response.data.idToken)\r\n                localStorage.setItem('expirationDate', expirationDate)\r\n                localStorage.setItem('userId', response.data.localId)\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\r\n                dispatch(checkAuthTimeout(response.data.expiresIn))\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch(authFail(err.response.data.error))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
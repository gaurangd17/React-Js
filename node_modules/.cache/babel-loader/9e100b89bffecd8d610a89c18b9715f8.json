{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport axios from 'axios';\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userId');\n  yield put(actions.logoutSucceed());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.emailId,\n    password: action.pass,\n    returnSecureToken: true\n  };\n  let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n\n  if (!action.isSignup) {\n    url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n  }\n\n  try {\n    const response = yield axios.post(url, authData);\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem('token', response.data.idToken);\n    yield localStorage.setItem('expirationDate', expirationDate);\n    yield localStorage.setItem('userId', response.data.localId);\n    yield put(actions.authSuccess(response.data.idToken, response.data.localId));\n    yield put(actions.checkAuthTimeout(response.data.expiresIn));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data.error));\n  }\n}\nexport function* authCheckStateSaga(action) {\n  const token = yield localStorage.getItem('token');\n\n  if (!token) {\n    yield put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem('expirationDate'));\n\n    if (expirationDate > new Date()) {\n      const userId = yield localStorage.getItem('userId');\n      yield put(actions.authSuccess(token, userId));\n      dispatch(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    } else {\n      dispatch(logout());\n    }\n  }\n}","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/sagas/auth.js"],"names":["put","delay","actions","axios","logoutSaga","action","localStorage","removeItem","logoutSucceed","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","authData","email","emailId","password","pass","returnSecureToken","url","isSignup","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","checkAuthTimeout","error","authFail","authCheckStateSaga","token","getItem","userId","dispatch"],"mappings":"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","sourcesContent":["import { put, delay } from 'redux-saga/effects'\r\nimport * as actions from '../actions/index'\r\nimport axios from 'axios'\r\n\r\nexport function* logoutSaga(action) {\r\n    yield localStorage.removeItem('token')\r\n    yield localStorage.removeItem('expirationDate')\r\n    yield localStorage.removeItem('userId')\r\n    yield put(actions.logoutSucceed())\r\n}\r\n\r\nexport function* checkAuthTimeoutSaga(action) {\r\n    yield delay(action.expirationTime * 1000)\r\n    yield put(actions.logout())\r\n}\r\n\r\nexport function* authUserSaga(action) {\r\n        yield put(actions.authStart());\r\n        \r\n        const authData = {  \r\n            email: action.emailId,\r\n            password: action.pass,\r\n            returnSecureToken: true\r\n        }; \r\n\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n\r\n        if(!action.isSignup){\r\n            url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n        }\r\n\r\n        try {\r\n        const response = yield axios.post(url, authData)\r\n            \r\n        const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n        yield localStorage.setItem('token', response.data.idToken)\r\n        yield localStorage.setItem('expirationDate', expirationDate)\r\n        yield localStorage.setItem('userId', response.data.localId)\r\n        yield put(actions.authSuccess(response.data.idToken, response.data.localId))\r\n        yield put(actions.checkAuthTimeout(response.data.expiresIn))\r\n    } catch(error){\r\n        yield put(actions.authFail(error.response.data.error))\r\n    }\r\n}\r\n\r\nexport function* authCheckStateSaga(action){\r\n    \r\n    const token = yield localStorage.getItem('token')\r\n    if(!token){\r\n        yield put(actions.logout())\r\n    } else {\r\n        const expirationDate = yield new Date(localStorage.getItem('expirationDate'))\r\n        if(expirationDate > new Date()){\r\n            const userId = yield localStorage.getItem('userId')\r\n            yield put(actions.authSuccess(token,userId))\r\n            dispatch(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000))\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n        \r\n\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
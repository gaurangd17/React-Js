{"ast":null,"code":"import _defineProperty from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{connect}from'react-redux';import{Redirect}from'react-router-dom';import Input from'../../components/UI/Input/Input';import Button from'../../components/UI/Button/Button';import classes from'./Auth.css';import*as actions from'../../store/actions/index';import Spinner from'../../components/UI/Spinner/Spinner';import{updateObject,checkValidity}from'../../shared/utitlity';var Auth=/*#__PURE__*/function(_Component){_inherits(Auth,_Component);var _super=_createSuper(Auth);function Auth(){var _this;_classCallCheck(this,Auth);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={controls:{email:{elementType:'input',elementConfig:{type:'email',placeholder:'Mail address'},value:'',validation:{required:true,isEmail:true},valid:false,touched:false},password:{elementType:'input',elementConfig:{type:'password',placeholder:'Password'},value:'',validation:{required:true,minLength:6},valid:false,touched:false}},isSignup:true};_this.inputChangedHandler=function(event,controlName){var updatedControlForm=updateObject(_this.state.controls,_defineProperty({},controlName,updateObject(_this.state.controls[controlName],{value:event.target.value,valid:checkValidity(event.target.value,_this.state.controls[controlName].validation),touched:true})));// ...this.state.controls,\n// [controlName]: {\n//     ...this.state.controls[controlName],\n//     value: event.target.value,\n//     valid: this.checkValidity(event.target.value,this.state.controls[controlName].validation),\n//     touched: true\n// }}\n_this.setState({controls:updatedControlForm});};_this.submitHandler=function(event){event.preventDefault();_this.props.onAuth(_this.state.controls.email.value,_this.state.controls.password.value,_this.state.isSignup);};_this.switchAuthModeHandler=function(){_this.setState(function(prevState){return{isSignup:!prevState.isSignup};});console.log('isSignup switch',_this.state.isSignup);};return _this;}_createClass(Auth,[{key:\"componentDidMount\",value:function componentDidMount(){if(!this.props.buildingBurger&&this.props.authRedirectPath){this.props.onSetAuthRedirectPath();}}},{key:\"render\",value:function render(){var _this2=this;var formElementArray=[];for(var key in this.state.controls){formElementArray.push({id:key,config:this.state.controls[key]});}var form=formElementArray.map(function(formElement){return/*#__PURE__*/React.createElement(Input,{key:formElement.id,elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,price:formElement.config.value,invalid:!formElement.config.valid,shouldValidate:formElement.config.validation,touched:formElement.config.touched,changed:function changed(event){return _this2.inputChangedHandler(event,formElement.id);}});});if(this.props.loading){form=/*#__PURE__*/React.createElement(Spinner,null);}var errorMessage=null;if(this.props.error){errorMessage=/*#__PURE__*/React.createElement(\"p\",null,this.props.error.message);}var redirect=null;if(this.props.isAuthenticated){redirect=/*#__PURE__*/React.createElement(Redirect,{to:this.props.authRedirectPath});}return/*#__PURE__*/React.createElement(\"div\",{className:classes.Auth},redirect,errorMessage,/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.submitHandler},form,/*#__PURE__*/React.createElement(Button,{btnType:\"Success\"},\"SUBMIT\")),/*#__PURE__*/React.createElement(Button,{clicked:this.switchAuthModeHandler,btnType:\"Danger\"},\"SWITCH TO \",this.state.isSignup?'SIGNIN':'SIGNUP'));}}]);return Auth;}(Component);var mapPropsToState=function mapPropsToState(state){return{loading:state.auth.loading,error:state.auth.error,isAuthenticated:state.auth.token!==null,buildingBurger:state.burgerBuilder.building,authRedirectPath:state.auth.authRedirectPath};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onAuth:function onAuth(email,password,isSignup){return dispatch(actions.auth(email,password,isSignup));},onSetAuthRedirectPath:function onSetAuthRedirectPath(){return dispatch(actions.setAuthRedirectPath('/'));}};};export default connect(mapPropsToState,mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","classes","actions","Spinner","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControlForm","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","console","log","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","redirect","isAuthenticated","mapPropsToState","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport {updateObject, checkValidity} from '../../shared/utitlity'\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Mail address'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'password',\r\n                    placeholder : 'Password'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup:  true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath){\r\n            this.props.onSetAuthRedirectPath()\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControlForm = updateObject(this.state.controls, {\r\n                [controlName]: updateObject(this.state.controls[controlName], {\r\n                    value: event.target.value,\r\n                    valid: checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                    touched: true\r\n                })   \r\n            })\r\n            // ...this.state.controls,\r\n            // [controlName]: {\r\n            //     ...this.state.controls[controlName],\r\n            //     value: event.target.value,\r\n            //     valid: this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n            //     touched: true\r\n            // }}\r\n        this.setState({controls: updatedControlForm})\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup}\r\n        })\r\n        console.log('isSignup switch', this.state.isSignup)\r\n    }\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id} \r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                price={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\r\n        ))\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner></Spinner>\r\n        }\r\n\r\n        let errorMessage = null\r\n\r\n        if(this.props.error){\r\n            errorMessage = <p>{this.props.error.message}</p>\r\n        }\r\n\r\n        let redirect = null\r\n        if(this.props.isAuthenticated){\r\n            redirect = <Redirect to={this.props.authRedirectPath}></Redirect>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {redirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                     {form}\r\n                     <Button btnType='Success'>SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler} \r\n                    btnType='Danger'>\r\n                        SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapPropsToState = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token!==null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState, mapDispatchToProps)(Auth)"]},"metadata":{},"sourceType":"module"}
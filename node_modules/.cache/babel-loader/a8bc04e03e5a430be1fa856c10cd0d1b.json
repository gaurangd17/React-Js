{"ast":null,"code":"import { put } from 'redux-saga/effects';\nimport axios from '../../axios-orders';\nimport * as actions from '../actions/index';\nexport function* purchaseBurger(action) {\n  const url = '/orders.json?auth=' + action.token;\n  yield put(actions.purchaseBurgerStart());\n\n  try {\n    const response = yield axios.post(url, action.orderData);\n    yield put(actions.purchaseBurgerSuccess(response.data.name, action.orderData));\n  } catch (error) {\n    yield put(actions.purchaseBurgerFail(error));\n  }\n}\nexport function* fetchOrders(action) {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('/orders.json' + queryParams).then(res => {\n      const fetchOrders = [];\n\n      for (let key in res.data) {\n        fetchOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFailed(err));\n    });\n  };\n}","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/sagas/order.js"],"names":["put","axios","actions","purchaseBurger","action","url","token","purchaseBurgerStart","response","post","orderData","purchaseBurgerSuccess","data","name","error","purchaseBurgerFail","fetchOrders","dispatch","fetchOrdersStart","queryParams","userId","get","then","res","key","push","id","fetchOrdersSuccess","catch","err","fetchOrdersFailed"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,oBAAlB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,cAAV,CAAyBC,MAAzB,EAAgC;AACnC,QAAMC,GAAG,GAAG,uBAAuBD,MAAM,CAACE,KAA1C;AACA,QAAMN,GAAG,CAACE,OAAO,CAACK,mBAAR,EAAD,CAAT;;AACA,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAWJ,GAAX,EAAgBD,MAAM,CAACM,SAAvB,CAAvB;AACA,UAAMV,GAAG,CAACE,OAAO,CAACS,qBAAR,CAA8BH,QAAQ,CAACI,IAAT,CAAcC,IAA5C,EAAkDT,MAAM,CAACM,SAAzD,CAAD,CAAT;AACH,GAHD,CAGC,OAAMI,KAAN,EAAY;AACT,UAAMd,GAAG,CAACE,OAAO,CAACa,kBAAR,CAA2BD,KAA3B,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUE,WAAV,CAAsBZ,MAAtB,EAA6B;AAChC,SAAOa,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;AACA,UAAMC,WAAW,GAAG,WAAWb,KAAX,GAAmB,6BAAnB,GAAmDc,MAAnD,GAA4D,GAAhF;AACAnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,iBAAiBF,WAA3B,EACKG,IADL,CACUC,GAAG,IAAI;AACT,YAAMP,WAAW,GAAE,EAAnB;;AACA,WAAI,IAAIQ,GAAR,IAAeD,GAAG,CAACX,IAAnB,EAAyB;AACrBI,QAAAA,WAAW,CAACS,IAAZ,CAAiB,EACb,GAAGF,GAAG,CAACX,IAAJ,CAASY,GAAT,CADU;AAEbE,UAAAA,EAAE,EAAEF;AAFS,SAAjB;AAIH;;AACDP,MAAAA,QAAQ,CAACU,kBAAkB,CAACX,WAAD,CAAnB,CAAR;AACH,KAVL,EAWKY,KAXL,CAWWC,GAAG,IAAI;AACVZ,MAAAA,QAAQ,CAACa,iBAAiB,CAACD,GAAD,CAAlB,CAAR;AACH,KAbL;AAcH,GAjBD;AAkBH","sourcesContent":["import {put} from 'redux-saga/effects'\r\n\r\nimport axios from '../../axios-orders'\r\nimport * as actions from '../actions/index'\r\n\r\nexport function* purchaseBurger(action){\r\n    const url = '/orders.json?auth=' + action.token;\r\n    yield put(actions.purchaseBurgerStart())\r\n    try{\r\n        const response = yield axios.post(url, action.orderData)\r\n        yield put(actions.purchaseBurgerSuccess(response.data.name, action.orderData))\r\n    }catch(error){\r\n        yield put(actions.purchaseBurgerFail(error))\r\n    }\r\n}\r\n\r\nexport function* fetchOrders(action){\r\n    return dispatch => {\r\n        dispatch(fetchOrdersStart())\r\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"'\r\n        axios.get('/orders.json' + queryParams)\r\n            .then(res => {\r\n                const fetchOrders =[];\r\n                for(let key in res.data) {\r\n                    fetchOrders.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    })\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchOrders))\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchOrdersFailed(err))\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
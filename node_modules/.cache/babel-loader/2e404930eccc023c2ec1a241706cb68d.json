{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utitlity';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControlForm = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      }); // ...this.state.controls,\n      // [controlName]: {\n      //     ...this.state.controls[controlName],\n      //     value: event.target.value,\n      //     valid: this.checkValidity(event.target.value,this.state.controls[controlName].validation),\n      //     touched: true\n      // }}\n\n      this.setState({\n        controls: updatedControlForm\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n      console.log('isSignup switch', this.state.isSignup);\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath) {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.controls) {\n      formElementArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      price: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 28\n        }\n      }, this.props.error.message);\n    }\n\n    let redirect = null;\n\n    if (this.props.isAuthenticated) {\n      redirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 24\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }, redirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 22\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapPropsToState = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapPropsToState, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","classes","actions","Spinner","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControlForm","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","console","log","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","redirect","isAuthenticated","mapPropsToState","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport {updateObject, checkValidity} from '../../shared/utitlity'\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Mail address'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'password',\r\n                    placeholder : 'Password'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup:  true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath){\r\n            this.props.onSetAuthRedirectPath()\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControlForm = updateObject(this.state.controls, {\r\n                [controlName]: updateObject(this.state.controls[controlName], {\r\n                    value: event.target.value,\r\n                    valid: this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                    touched: true\r\n                })   \r\n            })\r\n            // ...this.state.controls,\r\n            // [controlName]: {\r\n            //     ...this.state.controls[controlName],\r\n            //     value: event.target.value,\r\n            //     valid: this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n            //     touched: true\r\n            // }}\r\n        this.setState({controls: updatedControlForm})\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup}\r\n        })\r\n        console.log('isSignup switch', this.state.isSignup)\r\n    }\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id} \r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                price={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\r\n        ))\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner></Spinner>\r\n        }\r\n\r\n        let errorMessage = null\r\n\r\n        if(this.props.error){\r\n            errorMessage = <p>{this.props.error.message}</p>\r\n        }\r\n\r\n        let redirect = null\r\n        if(this.props.isAuthenticated){\r\n            redirect = <Redirect to={this.props.authRedirectPath}></Redirect>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {redirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                     {form}\r\n                     <Button btnType='Success'>SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler} \r\n                    btnType='Danger'>\r\n                        SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapPropsToState = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token!==null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState, mapDispatchToProps)(Auth)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{connect}from'react-redux';import Button from'../../../components/UI/Button/Button';import classes from'./ContactData.css';import axios from'../../../axios-orders';import Spinner from'../../../components/UI/Spinner/Spinner';import Input from'../../../components/UI/Input/Input';import withErrorHandler from'../../../hoc/withErrorHandler/withErrorHandler';import*as actions from'../../../store/actions/index';import{updateObject,checkValidity}from'../../../shared/utitlity';var ContactData=/*#__PURE__*/function(_Component){_inherits(ContactData,_Component);var _super=_createSuper(ContactData);function ContactData(){var _this;_classCallCheck(this,ContactData);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={orderForm:{name:{elementType:'input',elementConfig:{type:'text',placeholder:'Your Name'},value:'',validation:{required:true},valid:false,touched:false},street:{elementType:'input',elementConfig:{type:'text',placeholder:'Street'},value:'',validation:{required:true},valid:false,touched:false},zipCode:{elementType:'input',elementConfig:{type:'text',placeholder:'Zip Code'},value:'',validation:{required:true,minLength:5,maxLength:5,isNumeric:true},valid:false,touched:false},country:{elementType:'input',elementConfig:{type:'text',placeholder:'Country'},value:'',validation:{required:true},valid:false,touched:false},email:{elementType:'input',elementConfig:{type:'email',placeholder:'Your E-mail'},value:'',validation:{required:true,isEmail:true},valid:false,touched:false},deliveryMethod:{elementType:'select',elementConfig:{options:[{value:'fastest',displayValue:'Fastest'},{value:'cheapest',displayValue:'Cheapest'}]},value:'fastest',validation:{required:false},valid:true}},formIsValid:false// loading: false\n};_this.orderHandler=function(event){event.preventDefault();//  this.setState({\n//     loading:true\n// })\nvar formData={};for(var formElementIdentifier in _this.state.orderForm){formData[formElementIdentifier]=_this.state.orderForm[formElementIdentifier].value;}//alert('You Continue!!!')\nvar order={ingredients:_this.props.ingredients,price:_this.props.totalPrice,orderData:formData,userId:_this.props.userId};_this.props.onOrderBurger(order,_this.props.token);// axios.post('/orders.json',order)\n//     .then(response => {\n//         this.setState({\n//             loading : false\n//         })\n//         console.log(response);\n//         this.props.history.push('/');\n//     })\n//     .catch(error => {\n//         this.setState({\n//             loading : false\n//         })\n//     });\n};_this.inputChangedHandler=function(event,inputIdentifier){var updatedFormElement=updateObject(_this.state.orderForm[inputIdentifier],{value:event.target.value,valid:checkValidity(event.target.value,_this.state.orderForm[inputIdentifier].validation),touched:true});// {\n//     ...updatedOrderForm[inputIdentifier]\n// }\n// updatedFormElement.value = event.target.value;\n// updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\n// updatedFormElement.touched = true;\nvar updatedOrderForm=updateObject(_this.state.orderForm,_defineProperty({},inputIdentifier,updatedFormElement));// {...this.state.orderForm}\n// updatedOrderForm[inputIdentifier] = updatedFormElement\nvar formIsValid=true;for(var _inputIdentifier in updatedOrderForm){formIsValid=updatedOrderForm[_inputIdentifier].valid&&formIsValid;}// console.log(formIsValid)\n_this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});};return _this;}_createClass(ContactData,[{key:\"render\",value:function render(){var _this2=this;var formElementArray=[];for(var key in this.state.orderForm){formElementArray.push({id:key,config:this.state.orderForm[key]});}var form=/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.orderHandler},formElementArray.map(function(formElement){return/*#__PURE__*/React.createElement(Input,{key:formElement.id,elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,price:formElement.config.value,invalid:!formElement.config.valid,shouldValidate:formElement.config.validation,touched:formElement.config.touched,changed:function changed(event){return _this2.inputChangedHandler(event,formElement.id);}});}),/*#__PURE__*/React.createElement(Button,{btnType:\"Success\",clicked:this.orderHandler,disabled:!this.state.formIsValid},\"ORDER\"));if(this.props.loading){form=/*#__PURE__*/React.createElement(Spinner,null);}return/*#__PURE__*/React.createElement(\"div\",{className:classes.ContactData},/*#__PURE__*/React.createElement(\"h4\",null,\"Enter your Contact Data\"),form);}}]);return ContactData;}(Component);var mapStateToProps=function mapStateToProps(state){return{ingredients:state.burgerBuilder.ingredients,totalPrice:state.burgerBuilder.totalPrice,loading:state.order.loading,token:state.auth.token,userId:state.auth.userId};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onOrderBurger:function onOrderBurger(orderData,token){return dispatch(actions.purchaseBurger(orderData,token));}};};export default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","withErrorHandler","actions","updateObject","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","setState","formElementArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport {updateObject, checkValidity} from '../../../shared/utitlity'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm : {\r\n            name : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Your Name'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Street'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Zip Code'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 5,\r\n                    maxLength : 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Country'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Your E-mail'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod : {\r\n                elementType : 'select',\r\n                elementConfig : {\r\n                    options : [\r\n                        {value : 'fastest', displayValue: 'Fastest'},\r\n                        {value : 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value : 'fastest',\r\n                validation : {\r\n                    required : false\r\n                },\r\n                valid : true\r\n            }           \r\n        },\r\n        formIsValid: false        \r\n        // loading: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //  this.setState({\r\n        //     loading:true\r\n        // })\r\n\r\n        const formData = {}\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        //alert('You Continue!!!')\r\n        const order = {\r\n            ingredients : this.props.ingredients,\r\n            price : this.props.totalPrice,\r\n            orderData : formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token)\r\n\r\n        // axios.post('/orders.json',order)\r\n        //     .then(response => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //         console.log(response);\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //     });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        }) \r\n        // {\r\n        //     ...updatedOrderForm[inputIdentifier]\r\n        // }\r\n\r\n        // updatedFormElement.value = event.target.value;\r\n        // updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        // updatedFormElement.touched = true;\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]: updatedFormElement\r\n        })\r\n        // {...this.state.orderForm}\r\n        // updatedOrderForm[inputIdentifier] = updatedFormElement\r\n\r\n        let formIsValid = true\r\n\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        // console.log(formIsValid)\r\n\r\n        this.setState({\r\n            orderForm : updatedOrderForm,\r\n            formIsValid : formIsValid\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id} \r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        price={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)}\r\n                    />\r\n                ))}\r\n                <Button btnType='Success' clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button> \r\n            </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onOrderBurger : (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)) \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (withErrorHandler(ContactData,axios))"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React JS\\\\burger-app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {\n            required: false\n          },\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); //  this.setState({\n      //     loading:true\n      // })\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      } //alert('You Continue!!!')\n\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.totalPrice,\n        orderData: formData\n      }; // axios.post('/orders.json',order)\n      //     .then(response => {\n      //         this.setState({\n      //             loading : false\n      //         })\n      //         console.log(response);\n      //         this.props.history.push('/');\n      //     })\n      //     .catch(error => {\n      //         this.setState({\n      //             loading : false\n      //         })\n      //     });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      console.log(formIsValid);\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    console.log('isValid : ', isValid);\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, formElementArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      price: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.orderHandler,\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.ingredients,\n    totalPrice: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  onOrderBurger: orderData => dispatch(purchaseBurger(orderData));\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","withErrorHandler","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","price","totalPrice","orderData","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","console","log","setState","rules","isValid","trim","length","render","formElementArray","key","push","id","config","form","map","formElement","mapStateToProps","mapDispatchToProps","dispatch","onOrderBurger","purchaseBurger"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm : {\r\n            name : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Your Name'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Street'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Zip Code'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 5,\r\n                    maxLength : 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'text',\r\n                    placeholder : 'Country'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Your E-mail'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod : {\r\n                elementType : 'select',\r\n                elementConfig : {\r\n                    options : [\r\n                        {value : 'fastest', displayValue: 'Fastest'},\r\n                        {value : 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value : 'fastest',\r\n                validation : {\r\n                    required : false\r\n                },\r\n                valid : true\r\n            }           \r\n        },\r\n        formIsValid: false,        \r\n        loading: false\r\n    }\r\n\r\n    checkValidity(value, rules){\r\n        let isValid = true\r\n\r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        console.log('isValid : ', isValid)\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //  this.setState({\r\n        //     loading:true\r\n        // })\r\n\r\n        const formData = {}\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        //alert('You Continue!!!')\r\n        const order = {\r\n            ingredients : this.props.ingredients,\r\n            price : this.props.totalPrice,\r\n            orderData : formData\r\n        }\r\n\r\n        // axios.post('/orders.json',order)\r\n        //     .then(response => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //         console.log(response);\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({\r\n        //             loading : false\r\n        //         })\r\n        //     });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        }\r\n\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        }\r\n\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement\r\n\r\n        let formIsValid = true\r\n\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        console.log(formIsValid)\r\n\r\n        this.setState({\r\n            orderForm : updatedOrderForm,\r\n            formIsValid : formIsValid\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id} \r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        price={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)}\r\n                    />\r\n                ))}\r\n                <Button btnType='Success' clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button> \r\n            </form>\r\n        );\r\n\r\n        if(this.state.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.ingredients,\r\n        totalPrice: state.totalPrice\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    onOrderBurger : (orderData) => dispatch(purchaseBurger(orderData)) \r\n}\r\n\r\nexport default connect(mapStateToProps) (withErrorHandler(ContactData,axios))"]},"metadata":{},"sourceType":"module"}
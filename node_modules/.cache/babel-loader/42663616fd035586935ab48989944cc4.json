{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, orederData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orederData: orederData\n  };\n};\nexport const purchaseBurgerFail = err => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: err\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  console.log('token', token);\n  const url = '/orders.json?auth=' + token;\n  return dipatch => {\n    dipatch(purchaseBurgerStart());\n    axios.post(url, orderData).then(response => {\n      dipatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dipatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFailed = err => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAILED,\n    error: err\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('/orders.json' + queryParams).then(res => {\n      const fetchOrders = [];\n\n      for (let key in res.data) {\n        fetchOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFailed(err));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orederData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","err","PURCHASE_BURGER_FAIL","error","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","orderData","token","console","log","url","dipatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFailed","FETCH_ORDERS_FAILED","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","userId","dispatch","queryParams","get","res","key","push"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes'\r\nimport axios from '../../axios-orders'\r\n\r\nexport const purchaseBurgerSuccess = (id, orederData) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\r\n        orderId: id,\r\n        orederData: orederData\r\n    }\r\n}\r\n\r\nexport const purchaseBurgerFail = (err) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_FAIL,\r\n        error: err\r\n    }\r\n}\r\n\r\nexport const purchaseBurgerStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_START\r\n    }\r\n}\r\n\r\nexport const purchaseBurger = (orderData, token) => {\r\n    console.log('token', token)\r\n    const url = '/orders.json?auth=' + token;\r\n    return dipatch => {\r\n        dipatch(purchaseBurgerStart())\r\n        axios.post(url, orderData)\r\n            .then(response => {\r\n                dipatch(purchaseBurgerSuccess(response.data.name, orderData))\r\n            })\r\n            .catch(error => {\r\n                dipatch(purchaseBurgerFail(error))\r\n            });\r\n    }\r\n}\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT\r\n    }\r\n}\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n    return{\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    }\r\n}\r\n\r\nexport const fetchOrdersFailed = (err) => {\r\n    return{\r\n         type: actionTypes.FETCH_ORDERS_FAILED,\r\n         error: err\r\n    }\r\n}\r\n\r\nexport const fetchOrdersStart = () => {\r\n    return{\r\n        type: actionTypes.FETCH_ORDERS_START\r\n    }\r\n}\r\n\r\nexport const fetchOrders = (token, userId) => {\r\n    return dispatch => {\r\n        dispatch(fetchOrdersStart())\r\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"'\r\n        axios.get('/orders.json' + queryParams)\r\n            .then(res => {\r\n                const fetchOrders =[];\r\n                for(let key in res.data) {\r\n                    fetchOrders.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    })\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchOrders))\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchOrdersFailed(err))\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
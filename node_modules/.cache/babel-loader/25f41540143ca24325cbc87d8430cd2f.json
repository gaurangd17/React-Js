{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (idToken, localId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    userId: localId,\n    token: idToken\n  };\n};\nexport const authFail = err => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    errror: err\n  };\n};\nexport const logout = () => {\n  // localStorage.removeItem('token')\n  // localStorage.removeItem('expirationDate')\n  // localStorage.removeItem('userId')\n  return {\n    type: actionTypes.AUTH_INITIATE_LOGOUT\n  };\n};\nexport const logoutSucceed = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  // return dispatch => {\n  //     setTimeout(() => {\n  //         dispatch(logout());\n  //     }, expirationTime * 1000)\n  // }\n  return {\n    type: actionTypes.AUTH_CHECK_TIMEOUT,\n    expirationTime: 1\n  };\n};\nexport const auth = (emailId, pass, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: emailId,\n      password: pass,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate > new Date()) {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      } else {\n        dispatch(logout());\n      }\n    }\n  };\n};","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","idToken","localId","AUTH_SUCCESS","userId","token","authFail","err","AUTH_FAIL","errror","logout","AUTH_INITIATE_LOGOUT","logoutSucceed","AUTH_LOGOUT","checkAuthTimeout","expirationTime","AUTH_CHECK_TIMEOUT","auth","emailId","pass","isSignup","dispatch","authData","email","password","returnSecureToken","url","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","localStorage","setItem","catch","error","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nimport * as actionTypes from './actionTypes'\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = (idToken, localId) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        userId: localId, \r\n        token: idToken\r\n    }\r\n}\r\n\r\nexport const authFail = (err) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        errror: err\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    // localStorage.removeItem('token')\r\n    // localStorage.removeItem('expirationDate')\r\n    // localStorage.removeItem('userId')\r\n    return{\r\n        type: actionTypes.AUTH_INITIATE_LOGOUT\r\n    }\r\n}\r\n\r\nexport const logoutSucceed = () => {\r\n    return{\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    // return dispatch => {\r\n    //     setTimeout(() => {\r\n    //         dispatch(logout());\r\n    //     }, expirationTime * 1000)\r\n    // }\r\n\r\n    return{\r\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\r\n        expirationTime: 1\r\n    }\r\n}\r\n\r\nexport const auth = (emailId, pass, isSignup) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        \r\n        const authData = {\r\n            email: emailId,\r\n            password: pass,\r\n            returnSecureToken: true\r\n        }; \r\n\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n\r\n        if(!isSignup){\r\n            url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n        }\r\n\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                console.log(response)\r\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n                localStorage.setItem('token', response.data.idToken)\r\n                localStorage.setItem('expirationDate', expirationDate)\r\n                localStorage.setItem('userId', response.data.localId)\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\r\n                dispatch(checkAuthTimeout(response.data.expiresIn))\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch(authFail(err.response.data.error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n    return {\r\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path: path\r\n    }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if(!token){\r\n            dispatch(logout())\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n            if(expirationDate > new Date()){\r\n                const userId = localStorage.getItem('userId')\r\n                dispatch(authSuccess(token,userId))\r\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000))\r\n            } else {\r\n                dispatch(logout())\r\n            }\r\n            \r\n\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
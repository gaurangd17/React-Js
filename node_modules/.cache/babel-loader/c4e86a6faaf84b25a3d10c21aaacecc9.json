{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, orederData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orederData: orederData\n  };\n};\nexport const purchaseBurgerFail = err => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: err\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dipatch => {\n    dipatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dipatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dipatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFailed = err => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAILED,\n    error: err\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = token => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json?auth=' + token).then(res => {\n      const fetchOrders = [];\n\n      for (let key in res.data) {\n        fetchOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFailed(err));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orederData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","err","PURCHASE_BURGER_FAIL","error","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","orderData","dipatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFailed","FETCH_ORDERS_FAILED","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","token","dispatch","get","res","key","push"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,UAAL,KAAoB;AACrD,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,uBADf;AAEHC,IAAAA,OAAO,EAAEJ,EAFN;AAGHC,IAAAA,UAAU,EAAEA;AAHT,GAAP;AAKH,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,GAAD,IAAS;AACvC,SAAO;AACHJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,oBADf;AAEHC,IAAAA,KAAK,EAAEF;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHP,IAAAA,IAAI,EAAEL,WAAW,CAACa;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIC,SAAD,IAAe;AACzC,SAAOC,OAAO,IAAI;AACdA,IAAAA,OAAO,CAACJ,mBAAmB,EAApB,CAAP;AACAX,IAAAA,KAAK,CAACgB,IAAN,CAAW,cAAX,EAA0BF,SAA1B,EACKG,IADL,CACUC,QAAQ,IAAI;AACdH,MAAAA,OAAO,CAACd,qBAAqB,CAACiB,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBN,SAArB,CAAtB,CAAP;AACH,KAHL,EAIKO,KAJL,CAIWX,KAAK,IAAI;AACZK,MAAAA,OAAO,CAACR,kBAAkB,CAACG,KAAD,CAAnB,CAAP;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAM;AACFrB,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,oBADhB;AAEFD,IAAAA,MAAM,EAAEA;AAFN,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,iBAAiB,GAAInB,GAAD,IAAS;AACtC,SAAM;AACDJ,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,mBADjB;AAEDlB,IAAAA,KAAK,EAAEF;AAFN,GAAN;AAIH,CALM;AAOP,OAAO,MAAMqB,gBAAgB,GAAG,MAAM;AAClC,SAAM;AACFzB,IAAAA,IAAI,EAAEL,WAAW,CAAC+B;AADhB,GAAN;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAClC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACA7B,IAAAA,KAAK,CAACkC,GAAN,CAAU,uBAAqBF,KAA/B,EACKf,IADL,CACUkB,GAAG,IAAI;AACT,YAAMJ,WAAW,GAAE,EAAnB;;AACA,WAAI,IAAIK,GAAR,IAAeD,GAAG,CAAChB,IAAnB,EAAyB;AACrBY,QAAAA,WAAW,CAACM,IAAZ,CAAiB,EACb,GAAGF,GAAG,CAAChB,IAAJ,CAASiB,GAAT,CADU;AAEblC,UAAAA,EAAE,EAAEkC;AAFS,SAAjB;AAIH;;AACDH,MAAAA,QAAQ,CAACT,kBAAkB,CAACO,WAAD,CAAnB,CAAR;AACH,KAVL,EAWKV,KAXL,CAWWb,GAAG,IAAI;AACVyB,MAAAA,QAAQ,CAACN,iBAAiB,CAACnB,GAAD,CAAlB,CAAR;AACH,KAbL;AAcH,GAhBD;AAiBH,CAlBM","sourcesContent":["import * as actionTypes from './actionTypes'\r\nimport axios from '../../axios-orders'\r\n\r\nexport const purchaseBurgerSuccess = (id, orederData) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\r\n        orderId: id,\r\n        orederData: orederData\r\n    }\r\n}\r\n\r\nexport const purchaseBurgerFail = (err) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_FAIL,\r\n        error: err\r\n    }\r\n}\r\n\r\nexport const purchaseBurgerStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_START\r\n    }\r\n}\r\n\r\nexport const purchaseBurger = (orderData) => {\r\n    return dipatch => {\r\n        dipatch(purchaseBurgerStart())\r\n        axios.post('/orders.json',orderData)\r\n            .then(response => {\r\n                dipatch(purchaseBurgerSuccess(response.data.name, orderData))\r\n            })\r\n            .catch(error => {\r\n                dipatch(purchaseBurgerFail(error))\r\n            });\r\n    }\r\n}\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT\r\n    }\r\n}\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n    return{\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    }\r\n}\r\n\r\nexport const fetchOrdersFailed = (err) => {\r\n    return{\r\n         type: actionTypes.FETCH_ORDERS_FAILED,\r\n         error: err\r\n    }\r\n}\r\n\r\nexport const fetchOrdersStart = () => {\r\n    return{\r\n        type: actionTypes.FETCH_ORDERS_START\r\n    }\r\n}\r\n\r\nexport const fetchOrders = (token) => {\r\n    return dispatch => {\r\n        dispatch(fetchOrdersStart())\r\n        axios.get('/orders.json?auth='+token)\r\n            .then(res => {\r\n                const fetchOrders =[];\r\n                for(let key in res.data) {\r\n                    fetchOrders.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    })\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchOrders))\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchOrdersFailed(err))\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
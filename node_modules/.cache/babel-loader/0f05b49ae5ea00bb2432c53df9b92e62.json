{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utitlity';\nconst initialState = {\n  ingredients: null,\n  totalPrice: 50,\n  // loading : false,\n  error: false\n};\nconst INGREDIENT_PRICES = {\n  salad: 50,\n  cheese: 30,\n  bacon: 150,\n  meat: 200\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      addIngredients(state, action);\n    // {...state, ingredients : {...state.ingredients,[action.ingredientName] : state.ingredients[action.ingredientName] + 1},totalPrice : state.totalPrice + INGREDIENT_PRICES[action.ingredientName]   }\n\n    case actionTypes.REMOVE_INGREDIENT:\n      removeIngredients(state, action);\n    // {...state, ingredients : {...state.ingredients,[action.ingredientName] : state.ingredients[action.ingredientName] - 1},totalPrice : state.totalPrice - INGREDIENT_PRICES[action.ingredientName]}\n\n    case actionTypes.SET_INGREDIENTS: // {...state,ingredients: {salad: action.ingredients.salad,meat: action.ingredients.meat,cheese: action.ingredients.cheese,bacon: action.ingredients.bacon},totalPrice: 50,  error: false}\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return updateObject(state, {\n        error: true\n      });\n    // {...state,error: true}\n\n    default:\n      return state;\n  }\n};\n\nconst addIngredients = (state, action) => {\n  const updateIngredient = {\n    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n  };\n  const updateIngredients = updateObject(state.ingredients, updateIngredient);\n  const updatedState = {\n    ingredients: updateIngredients,\n    totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n  };\n  return updateObject(state, updatedState);\n};\n\nconst removeIngredients = (state, action) => {\n  const updatedIngredient = {\n    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n  };\n  const updatedIngredients = updateObject(state.ingredients, updatedIngredient);\n  const updatedStates = {\n    ingredients: updatedIngredients,\n    totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n  };\n  return updateObject(state, updatedStates);\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","updateObject","initialState","ingredients","totalPrice","error","INGREDIENT_PRICES","salad","cheese","bacon","meat","reducer","state","action","type","ADD_INGREDIENT","addIngredients","REMOVE_INGREDIENT","removeIngredients","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED","updateIngredient","ingredientName","updateIngredients","updatedState","updatedIngredient","updatedIngredients","updatedStates"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,aAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,UAAU,EAAE,EAFK;AAGjB;AACAC,EAAAA,KAAK,EAAG;AAJS,CAArB;AAOA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAG,EADc;AAEtBC,EAAAA,MAAM,EAAG,EAFa;AAGtBC,EAAAA,KAAK,EAAG,GAHc;AAItBC,EAAAA,IAAI,EAAG;AAJe,CAA1B;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKd,WAAW,CAACe,cAAjB;AAAiCC,MAAAA,cAAc,CAACJ,KAAD,EAAOC,MAAP,CAAd;AAC7B;;AACJ,SAAKb,WAAW,CAACiB,iBAAjB;AAAoCC,MAAAA,iBAAiB,CAACN,KAAD,EAAQC,MAAR,CAAjB;AAChC;;AACJ,SAAKb,WAAW,CAACmB,eAAjB,CALJ,CAMI;;AACA,SAAKnB,WAAW,CAACoB,wBAAjB;AAA2C,aAAOnB,YAAY,CAACW,KAAD,EAAO;AAACP,QAAAA,KAAK,EAAE;AAAR,OAAP,CAAnB;AAC3C;;AACA;AAAS,aAAOO,KAAP;AATb;AAWH,CAZD;;AAcA,MAAMI,cAAc,GAAG,CAACJ,KAAD,EAAOC,MAAP,KAAkB;AACrC,QAAMQ,gBAAgB,GAAG;AAAC,KAACR,MAAM,CAACS,cAAR,GAA0BV,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACS,cAAzB,IAA2C;AAAtE,GAAzB;AACA,QAAMC,iBAAiB,GAAGtB,YAAY,CAACW,KAAK,CAACT,WAAP,EAAoBkB,gBAApB,CAAtC;AACA,QAAMG,YAAY,GAAG;AACjBrB,IAAAA,WAAW,EAAEoB,iBADI;AAEjBnB,IAAAA,UAAU,EAAGQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACS,cAAR;AAFhC,GAArB;AAIA,SAAOrB,YAAY,CAACW,KAAD,EAAQY,YAAR,CAAnB;AACH,CARD;;AAUA,MAAMN,iBAAiB,GAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACxC,QAAMY,iBAAiB,GAAG;AAAC,KAACZ,MAAM,CAACS,cAAR,GAA0BV,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACS,cAAzB,IAA2C;AAAtE,GAA1B;AACA,QAAMI,kBAAkB,GAAGzB,YAAY,CAACW,KAAK,CAACT,WAAP,EAAoBsB,iBAApB,CAAvC;AACA,QAAME,aAAa,GAAG;AAClBxB,IAAAA,WAAW,EAAEuB,kBADK;AAElBtB,IAAAA,UAAU,EAAGQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACS,cAAR;AAF/B,GAAtB;AAIA,SAAOrB,YAAY,CAACW,KAAD,EAAQe,aAAR,CAAnB;AACH,CARD;;AAUA,eAAehB,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\r\nimport {updateObject} from '../utitlity'\r\n\r\nconst initialState = {\r\n    ingredients: null,\r\n    totalPrice: 50,\r\n    // loading : false,\r\n    error : false\r\n}\r\n\r\nconst INGREDIENT_PRICES = {\r\n    salad : 50,\r\n    cheese : 30,\r\n    bacon : 150,\r\n    meat : 200\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.ADD_INGREDIENT: addIngredients(state,action)\r\n            // {...state, ingredients : {...state.ingredients,[action.ingredientName] : state.ingredients[action.ingredientName] + 1},totalPrice : state.totalPrice + INGREDIENT_PRICES[action.ingredientName]   }\r\n        case actionTypes.REMOVE_INGREDIENT: removeIngredients(state, action)\r\n            // {...state, ingredients : {...state.ingredients,[action.ingredientName] : state.ingredients[action.ingredientName] - 1},totalPrice : state.totalPrice - INGREDIENT_PRICES[action.ingredientName]}\r\n        case actionTypes.SET_INGREDIENTS: \r\n        // {...state,ingredients: {salad: action.ingredients.salad,meat: action.ingredients.meat,cheese: action.ingredients.cheese,bacon: action.ingredients.bacon},totalPrice: 50,  error: false}\r\n        case actionTypes.FETCH_INGREDIENTS_FAILED: return updateObject(state,{error: true}) \r\n        // {...state,error: true}\r\n        default: return state \r\n    }\r\n}\r\n\r\nconst addIngredients = (state,action) => {\r\n    const updateIngredient = {[action.ingredientName] : state.ingredients[action.ingredientName] + 1}\r\n    const updateIngredients = updateObject(state.ingredients, updateIngredient)\r\n    const updatedState = {\r\n        ingredients: updateIngredients,\r\n        totalPrice : state.totalPrice + INGREDIENT_PRICES[action.ingredientName]   \r\n    }\r\n    return updateObject(state, updatedState) \r\n}\r\n\r\nconst removeIngredients =(state, action) => {\r\n    const updatedIngredient = {[action.ingredientName] : state.ingredients[action.ingredientName] - 1}\r\n    const updatedIngredients = updateObject(state.ingredients, updatedIngredient)\r\n    const updatedStates = {\r\n        ingredients: updatedIngredients,\r\n        totalPrice : state.totalPrice - INGREDIENT_PRICES[action.ingredientName]   \r\n    }\r\n    return updateObject(state, updatedStates) \r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}
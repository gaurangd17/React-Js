{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport axios from 'axios';\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userId');\n  yield put(actions.logoutSucceed());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.emailId,\n    password: action.pass,\n    returnSecureToken: true\n  };\n  let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n\n  if (!action.isSignup) {\n    url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\n  }\n\n  axios.post(url, authData).then(response => {\n    console.log(response);\n    const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    localStorage.setItem('token', response.data.idToken);\n    localStorage.setItem('expirationDate', expirationDate);\n    localStorage.setItem('userId', response.data.localId);\n    dispatch(authSuccess(response.data.idToken, response.data.localId));\n    dispatch(checkAuthTimeout(response.data.expiresIn));\n  }).catch(err => {\n    console.log(err);\n    dispatch(authFail(err.response.data.error));\n  });\n}","map":{"version":3,"sources":["D:/Workspace/React JS/burger-app/src/store/sagas/auth.js"],"names":["put","delay","actions","axios","logoutSaga","action","localStorage","removeItem","logoutSucceed","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","authData","email","emailId","password","pass","returnSecureToken","url","isSignup","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","dispatch","authSuccess","checkAuthTimeout","catch","err","authFail","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAChC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AACA,QAAMP,GAAG,CAACE,OAAO,CAACM,aAAR,EAAD,CAAT;AACH;AAED,OAAO,UAAUC,oBAAV,CAA+BJ,MAA/B,EAAuC;AAC1C,QAAMJ,KAAK,CAACI,MAAM,CAACK,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMV,GAAG,CAACE,OAAO,CAACS,MAAR,EAAD,CAAT;AACH;AAED,OAAO,UAAUC,YAAV,CAAuBP,MAAvB,EAA+B;AAC9B,QAAML,GAAG,CAACE,OAAO,CAACW,SAAR,EAAD,CAAT;AAEA,QAAMC,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAEV,MAAM,CAACW,OADD;AAEbC,IAAAA,QAAQ,EAAEZ,MAAM,CAACa,IAFJ;AAGbC,IAAAA,iBAAiB,EAAE;AAHN,GAAjB;AAMA,MAAIC,GAAG,GAAG,uGAAV;;AAEA,MAAG,CAACf,MAAM,CAACgB,QAAX,EAAoB;AAChBD,IAAAA,GAAG,GAAC,mHAAJ;AACH;;AAEDjB,EAAAA,KAAK,CAACmB,IAAN,CAAWF,GAAX,EAAgBN,QAAhB,EACKS,IADL,CACUC,QAAQ,IAAI;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMG,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBL,QAAQ,CAACM,IAAT,CAAcC,SAAd,GAA0B,IAA1D,CAAvB;AACAzB,IAAAA,YAAY,CAAC0B,OAAb,CAAqB,OAArB,EAA8BR,QAAQ,CAACM,IAAT,CAAcG,OAA5C;AACA3B,IAAAA,YAAY,CAAC0B,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACArB,IAAAA,YAAY,CAAC0B,OAAb,CAAqB,QAArB,EAA+BR,QAAQ,CAACM,IAAT,CAAcI,OAA7C;AACAC,IAAAA,QAAQ,CAACC,WAAW,CAACZ,QAAQ,CAACM,IAAT,CAAcG,OAAf,EAAwBT,QAAQ,CAACM,IAAT,CAAcI,OAAtC,CAAZ,CAAR;AACAC,IAAAA,QAAQ,CAACE,gBAAgB,CAACb,QAAQ,CAACM,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACH,GATL,EAUKO,KAVL,CAUWC,GAAG,IAAI;AACVd,IAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACAJ,IAAAA,QAAQ,CAACK,QAAQ,CAACD,GAAG,CAACf,QAAJ,CAAaM,IAAb,CAAkBW,KAAnB,CAAT,CAAR;AACH,GAbL;AAcP","sourcesContent":["import { put, delay } from 'redux-saga/effects'\r\nimport * as actions from '../actions/index'\r\nimport axios from 'axios'\r\n\r\nexport function* logoutSaga(action) {\r\n    yield localStorage.removeItem('token')\r\n    yield localStorage.removeItem('expirationDate')\r\n    yield localStorage.removeItem('userId')\r\n    yield put(actions.logoutSucceed())\r\n}\r\n\r\nexport function* checkAuthTimeoutSaga(action) {\r\n    yield delay(action.expirationTime * 1000)\r\n    yield put(actions.logout())\r\n}\r\n\r\nexport function* authUserSaga(action) {\r\n        yield put(actions.authStart());\r\n        \r\n        const authData = {  \r\n            email: action.emailId,\r\n            password: action.pass,\r\n            returnSecureToken: true\r\n        }; \r\n\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n\r\n        if(!action.isSignup){\r\n            url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADqcJ2Kga3SLu51fbcD-XN2a4uMLbA9LE';\r\n        }\r\n\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                console.log(response)\r\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n                localStorage.setItem('token', response.data.idToken)\r\n                localStorage.setItem('expirationDate', expirationDate)\r\n                localStorage.setItem('userId', response.data.localId)\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\r\n                dispatch(checkAuthTimeout(response.data.expiresIn))\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch(authFail(err.response.data.error))\r\n            })\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}